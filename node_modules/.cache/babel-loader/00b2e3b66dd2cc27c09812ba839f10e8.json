{"ast":null,"code":"var util = require(\"util\");\n\nvar StringSource = module.exports = function (string, description) {\n  var self = {\n    asString: function () {\n      return string;\n    },\n    range: function (startIndex, endIndex) {\n      return new StringSourceRange(string, description, startIndex, endIndex);\n    }\n  };\n  return self;\n};\n\nvar StringSourceRange = function (string, description, startIndex, endIndex) {\n  this._string = string;\n  this._description = description;\n  this._startIndex = startIndex;\n  this._endIndex = endIndex;\n};\n\nStringSourceRange.prototype.to = function (otherRange) {\n  // TODO: Assert that tokens are the same across both iterators\n  return new StringSourceRange(this._string, this._description, this._startIndex, otherRange._endIndex);\n};\n\nStringSourceRange.prototype.describe = function () {\n  var position = this._position();\n\n  var description = this._description ? this._description + \"\\n\" : \"\";\n  return util.format(\"%sLine number: %s\\nCharacter number: %s\", description, position.lineNumber, position.characterNumber);\n};\n\nStringSourceRange.prototype.lineNumber = function () {\n  return this._position().lineNumber;\n};\n\nStringSourceRange.prototype.characterNumber = function () {\n  return this._position().characterNumber;\n};\n\nStringSourceRange.prototype._position = function () {\n  var self = this;\n  var index = 0;\n\n  var nextNewLine = function () {\n    return self._string.indexOf(\"\\n\", index);\n  };\n\n  var lineNumber = 1;\n\n  while (nextNewLine() !== -1 && nextNewLine() < this._startIndex) {\n    index = nextNewLine() + 1;\n    lineNumber += 1;\n  }\n\n  var characterNumber = this._startIndex - index + 1;\n  return {\n    lineNumber: lineNumber,\n    characterNumber: characterNumber\n  };\n};","map":{"version":3,"names":["util","require","StringSource","module","exports","string","description","self","asString","range","startIndex","endIndex","StringSourceRange","_string","_description","_startIndex","_endIndex","prototype","to","otherRange","describe","position","_position","format","lineNumber","characterNumber","index","nextNewLine","indexOf"],"sources":["E:/react-projects/new project/2022/converter/converter/node_modules/lop/lib/StringSource.js"],"sourcesContent":["var util = require(\"util\");\n\nvar StringSource = module.exports = function(string, description) {\n    var self = {\n        asString: function() {\n            return string;\n        },\n        range: function(startIndex, endIndex) {\n            return new StringSourceRange(string, description, startIndex, endIndex);\n        }\n    };\n    return self;\n};\n\nvar StringSourceRange = function(string, description, startIndex, endIndex) {\n    this._string = string;\n    this._description = description;\n    this._startIndex = startIndex;\n    this._endIndex = endIndex;\n};\n\nStringSourceRange.prototype.to = function(otherRange) {\n    // TODO: Assert that tokens are the same across both iterators\n    return new StringSourceRange(this._string, this._description, this._startIndex, otherRange._endIndex);\n};\n\nStringSourceRange.prototype.describe = function() {\n    var position = this._position();\n    var description = this._description ? this._description + \"\\n\" : \"\";\n    return util.format(\"%sLine number: %s\\nCharacter number: %s\",\n        description, position.lineNumber, position.characterNumber);\n};\n\nStringSourceRange.prototype.lineNumber = function() {\n    return this._position().lineNumber;\n};\n\nStringSourceRange.prototype.characterNumber = function() {\n    return this._position().characterNumber;\n};\n\nStringSourceRange.prototype._position = function() {\n    var self = this;\n    var index = 0;\n    var nextNewLine = function() {\n        return self._string.indexOf(\"\\n\", index);\n    };\n    \n    var lineNumber = 1;\n    while (nextNewLine() !== -1 && nextNewLine() < this._startIndex) {\n        index = nextNewLine() + 1;\n        lineNumber += 1;\n    }\n    var characterNumber = this._startIndex - index + 1;\n    return {lineNumber: lineNumber, characterNumber: characterNumber};\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,YAAY,GAAGC,MAAM,CAACC,OAAP,GAAiB,UAASC,MAAT,EAAiBC,WAAjB,EAA8B;EAC9D,IAAIC,IAAI,GAAG;IACPC,QAAQ,EAAE,YAAW;MACjB,OAAOH,MAAP;IACH,CAHM;IAIPI,KAAK,EAAE,UAASC,UAAT,EAAqBC,QAArB,EAA+B;MAClC,OAAO,IAAIC,iBAAJ,CAAsBP,MAAtB,EAA8BC,WAA9B,EAA2CI,UAA3C,EAAuDC,QAAvD,CAAP;IACH;EANM,CAAX;EAQA,OAAOJ,IAAP;AACH,CAVD;;AAYA,IAAIK,iBAAiB,GAAG,UAASP,MAAT,EAAiBC,WAAjB,EAA8BI,UAA9B,EAA0CC,QAA1C,EAAoD;EACxE,KAAKE,OAAL,GAAeR,MAAf;EACA,KAAKS,YAAL,GAAoBR,WAApB;EACA,KAAKS,WAAL,GAAmBL,UAAnB;EACA,KAAKM,SAAL,GAAiBL,QAAjB;AACH,CALD;;AAOAC,iBAAiB,CAACK,SAAlB,CAA4BC,EAA5B,GAAiC,UAASC,UAAT,EAAqB;EAClD;EACA,OAAO,IAAIP,iBAAJ,CAAsB,KAAKC,OAA3B,EAAoC,KAAKC,YAAzC,EAAuD,KAAKC,WAA5D,EAAyEI,UAAU,CAACH,SAApF,CAAP;AACH,CAHD;;AAKAJ,iBAAiB,CAACK,SAAlB,CAA4BG,QAA5B,GAAuC,YAAW;EAC9C,IAAIC,QAAQ,GAAG,KAAKC,SAAL,EAAf;;EACA,IAAIhB,WAAW,GAAG,KAAKQ,YAAL,GAAoB,KAAKA,YAAL,GAAoB,IAAxC,GAA+C,EAAjE;EACA,OAAOd,IAAI,CAACuB,MAAL,CAAY,yCAAZ,EACHjB,WADG,EACUe,QAAQ,CAACG,UADnB,EAC+BH,QAAQ,CAACI,eADxC,CAAP;AAEH,CALD;;AAOAb,iBAAiB,CAACK,SAAlB,CAA4BO,UAA5B,GAAyC,YAAW;EAChD,OAAO,KAAKF,SAAL,GAAiBE,UAAxB;AACH,CAFD;;AAIAZ,iBAAiB,CAACK,SAAlB,CAA4BQ,eAA5B,GAA8C,YAAW;EACrD,OAAO,KAAKH,SAAL,GAAiBG,eAAxB;AACH,CAFD;;AAIAb,iBAAiB,CAACK,SAAlB,CAA4BK,SAA5B,GAAwC,YAAW;EAC/C,IAAIf,IAAI,GAAG,IAAX;EACA,IAAImB,KAAK,GAAG,CAAZ;;EACA,IAAIC,WAAW,GAAG,YAAW;IACzB,OAAOpB,IAAI,CAACM,OAAL,CAAae,OAAb,CAAqB,IAArB,EAA2BF,KAA3B,CAAP;EACH,CAFD;;EAIA,IAAIF,UAAU,GAAG,CAAjB;;EACA,OAAOG,WAAW,OAAO,CAAC,CAAnB,IAAwBA,WAAW,KAAK,KAAKZ,WAApD,EAAiE;IAC7DW,KAAK,GAAGC,WAAW,KAAK,CAAxB;IACAH,UAAU,IAAI,CAAd;EACH;;EACD,IAAIC,eAAe,GAAG,KAAKV,WAAL,GAAmBW,KAAnB,GAA2B,CAAjD;EACA,OAAO;IAACF,UAAU,EAAEA,UAAb;IAAyBC,eAAe,EAAEA;EAA1C,CAAP;AACH,CAdD"},"metadata":{},"sourceType":"script"}