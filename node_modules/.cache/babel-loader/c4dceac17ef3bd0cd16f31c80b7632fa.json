{"ast":null,"code":"exports.readContentTypesFromXml = readContentTypesFromXml;\nvar fallbackContentTypes = {\n  \"png\": \"png\",\n  \"gif\": \"gif\",\n  \"jpeg\": \"jpeg\",\n  \"jpg\": \"jpeg\",\n  \"tif\": \"tiff\",\n  \"tiff\": \"tiff\",\n  \"bmp\": \"bmp\"\n};\nexports.defaultContentTypes = contentTypes({}, {});\n\nfunction readContentTypesFromXml(element) {\n  var extensionDefaults = {};\n  var overrides = {};\n  element.children.forEach(function (child) {\n    if (child.name === \"content-types:Default\") {\n      extensionDefaults[child.attributes.Extension] = child.attributes.ContentType;\n    }\n\n    if (child.name === \"content-types:Override\") {\n      var name = child.attributes.PartName;\n\n      if (name.charAt(0) === \"/\") {\n        name = name.substring(1);\n      }\n\n      overrides[name] = child.attributes.ContentType;\n    }\n  });\n  return contentTypes(overrides, extensionDefaults);\n}\n\nfunction contentTypes(overrides, extensionDefaults) {\n  return {\n    findContentType: function (path) {\n      var overrideContentType = overrides[path];\n\n      if (overrideContentType) {\n        return overrideContentType;\n      } else {\n        var pathParts = path.split(\".\");\n        var extension = pathParts[pathParts.length - 1];\n\n        if (extensionDefaults.hasOwnProperty(extension)) {\n          return extensionDefaults[extension];\n        } else {\n          var fallback = fallbackContentTypes[extension.toLowerCase()];\n\n          if (fallback) {\n            return \"image/\" + fallback;\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["exports","readContentTypesFromXml","fallbackContentTypes","defaultContentTypes","contentTypes","element","extensionDefaults","overrides","children","forEach","child","name","attributes","Extension","ContentType","PartName","charAt","substring","findContentType","path","overrideContentType","pathParts","split","extension","length","hasOwnProperty","fallback","toLowerCase"],"sources":["E:/react-projects/new project/2022/converter/converter/node_modules/mammoth/lib/docx/content-types-reader.js"],"sourcesContent":["exports.readContentTypesFromXml = readContentTypesFromXml;\n\nvar fallbackContentTypes = {\n    \"png\": \"png\",\n    \"gif\": \"gif\",\n    \"jpeg\": \"jpeg\",\n    \"jpg\": \"jpeg\",\n    \"tif\": \"tiff\",\n    \"tiff\": \"tiff\",\n    \"bmp\": \"bmp\"\n};\n\nexports.defaultContentTypes = contentTypes({}, {});\n\n\nfunction readContentTypesFromXml(element) {\n    var extensionDefaults = {};\n    var overrides = {};\n    \n    element.children.forEach(function(child) {\n        if (child.name === \"content-types:Default\") {\n            extensionDefaults[child.attributes.Extension] = child.attributes.ContentType;\n        }\n        if (child.name === \"content-types:Override\") {\n            var name = child.attributes.PartName;\n            if (name.charAt(0) === \"/\") {\n                name = name.substring(1);\n            }\n            overrides[name] = child.attributes.ContentType;\n        }\n    });\n    return contentTypes(overrides, extensionDefaults);\n}\n\nfunction contentTypes(overrides, extensionDefaults) {\n    return {\n        findContentType: function(path) {\n            var overrideContentType = overrides[path];\n            if (overrideContentType) {\n                return overrideContentType;\n            } else {\n                var pathParts = path.split(\".\");\n                var extension = pathParts[pathParts.length - 1];\n                if (extensionDefaults.hasOwnProperty(extension)) {\n                    return extensionDefaults[extension];\n                } else {\n                    var fallback = fallbackContentTypes[extension.toLowerCase()];\n                    if (fallback) {\n                        return \"image/\" + fallback;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n    };\n    \n}\n"],"mappings":"AAAAA,OAAO,CAACC,uBAAR,GAAkCA,uBAAlC;AAEA,IAAIC,oBAAoB,GAAG;EACvB,OAAO,KADgB;EAEvB,OAAO,KAFgB;EAGvB,QAAQ,MAHe;EAIvB,OAAO,MAJgB;EAKvB,OAAO,MALgB;EAMvB,QAAQ,MANe;EAOvB,OAAO;AAPgB,CAA3B;AAUAF,OAAO,CAACG,mBAAR,GAA8BC,YAAY,CAAC,EAAD,EAAK,EAAL,CAA1C;;AAGA,SAASH,uBAAT,CAAiCI,OAAjC,EAA0C;EACtC,IAAIC,iBAAiB,GAAG,EAAxB;EACA,IAAIC,SAAS,GAAG,EAAhB;EAEAF,OAAO,CAACG,QAAR,CAAiBC,OAAjB,CAAyB,UAASC,KAAT,EAAgB;IACrC,IAAIA,KAAK,CAACC,IAAN,KAAe,uBAAnB,EAA4C;MACxCL,iBAAiB,CAACI,KAAK,CAACE,UAAN,CAAiBC,SAAlB,CAAjB,GAAgDH,KAAK,CAACE,UAAN,CAAiBE,WAAjE;IACH;;IACD,IAAIJ,KAAK,CAACC,IAAN,KAAe,wBAAnB,EAA6C;MACzC,IAAIA,IAAI,GAAGD,KAAK,CAACE,UAAN,CAAiBG,QAA5B;;MACA,IAAIJ,IAAI,CAACK,MAAL,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;QACxBL,IAAI,GAAGA,IAAI,CAACM,SAAL,CAAe,CAAf,CAAP;MACH;;MACDV,SAAS,CAACI,IAAD,CAAT,GAAkBD,KAAK,CAACE,UAAN,CAAiBE,WAAnC;IACH;EACJ,CAXD;EAYA,OAAOV,YAAY,CAACG,SAAD,EAAYD,iBAAZ,CAAnB;AACH;;AAED,SAASF,YAAT,CAAsBG,SAAtB,EAAiCD,iBAAjC,EAAoD;EAChD,OAAO;IACHY,eAAe,EAAE,UAASC,IAAT,EAAe;MAC5B,IAAIC,mBAAmB,GAAGb,SAAS,CAACY,IAAD,CAAnC;;MACA,IAAIC,mBAAJ,EAAyB;QACrB,OAAOA,mBAAP;MACH,CAFD,MAEO;QACH,IAAIC,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAhB;QACA,IAAIC,SAAS,GAAGF,SAAS,CAACA,SAAS,CAACG,MAAV,GAAmB,CAApB,CAAzB;;QACA,IAAIlB,iBAAiB,CAACmB,cAAlB,CAAiCF,SAAjC,CAAJ,EAAiD;UAC7C,OAAOjB,iBAAiB,CAACiB,SAAD,CAAxB;QACH,CAFD,MAEO;UACH,IAAIG,QAAQ,GAAGxB,oBAAoB,CAACqB,SAAS,CAACI,WAAV,EAAD,CAAnC;;UACA,IAAID,QAAJ,EAAc;YACV,OAAO,WAAWA,QAAlB;UACH,CAFD,MAEO;YACH,OAAO,IAAP;UACH;QACJ;MACJ;IACJ;EAnBE,CAAP;AAsBH"},"metadata":{},"sourceType":"script"}