{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var XMLStringifier,\n      bind = function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = function () {\n    function XMLStringifier(options) {\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      options || (options = {});\n      this.noDoubleEncoding = options.noDoubleEncoding;\n      ref = options.stringify || {};\n\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.eleName = function (val) {\n      val = '' + val || '';\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.eleText = function (val) {\n      val = '' + val || '';\n      return this.assertLegalChar(this.elEscape(val));\n    };\n\n    XMLStringifier.prototype.cdata = function (val) {\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function (val) {\n      val = '' + val || '';\n\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attName = function (val) {\n      return val = '' + val || '';\n    };\n\n    XMLStringifier.prototype.attValue = function (val) {\n      val = '' + val || '';\n      return this.attEscape(val);\n    };\n\n    XMLStringifier.prototype.insTarget = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.insValue = function (val) {\n      val = '' + val || '';\n\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlVersion = function (val) {\n      val = '' + val || '';\n\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function (val) {\n      val = '' + val || '';\n\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function (val) {\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdSysID = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttType = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function (val) {\n      if (val != null) {\n        return '' + val || '';\n      } else {\n        return val;\n      }\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdNData = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n    XMLStringifier.prototype.convertPIKey = '?';\n    XMLStringifier.prototype.convertTextKey = '#text';\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function (str) {\n      var res;\n      res = str.match(/[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/);\n\n      if (res) {\n        throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n      }\n\n      return str;\n    };\n\n    XMLStringifier.prototype.elEscape = function (str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function (str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n  }();\n}).call(this);","map":{"version":3,"names":["XMLStringifier","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","module","exports","options","assertLegalChar","key","ref","value","noDoubleEncoding","stringify","call","prototype","eleName","val","eleText","elEscape","cdata","replace","comment","match","Error","raw","attName","attValue","attEscape","insTarget","insValue","xmlVersion","xmlEncoding","xmlStandalone","dtdPubID","dtdSysID","dtdElementValue","dtdAttType","dtdAttDefault","dtdEntityValue","dtdNData","convertAttKey","convertPIKey","convertTextKey","convertCDataKey","convertCommentKey","convertRawKey","str","res","index","ampregex"],"sources":["E:/react-projects/new project/2022/converter/converter/node_modules/xmlbuilder/lib/XMLStringifier.js"],"sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringifier,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    function XMLStringifier(options) {\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      options || (options = {});\n      this.noDoubleEncoding = options.noDoubleEncoding;\n      ref = options.stringify || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.eleName = function(val) {\n      val = '' + val || '';\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.eleText = function(val) {\n      val = '' + val || '';\n      return this.assertLegalChar(this.elEscape(val));\n    };\n\n    XMLStringifier.prototype.cdata = function(val) {\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function(val) {\n      val = '' + val || '';\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attName = function(val) {\n      return val = '' + val || '';\n    };\n\n    XMLStringifier.prototype.attValue = function(val) {\n      val = '' + val || '';\n      return this.attEscape(val);\n    };\n\n    XMLStringifier.prototype.insTarget = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.insValue = function(val) {\n      val = '' + val || '';\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlVersion = function(val) {\n      val = '' + val || '';\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function(val) {\n      val = '' + val || '';\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function(val) {\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdSysID = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttType = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\n      if (val != null) {\n        return '' + val || '';\n      } else {\n        return val;\n      }\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdNData = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function(str) {\n      var res;\n      res = str.match(/[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/);\n      if (res) {\n        throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.elEscape = function(str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function(str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n\n  })();\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,cAAJ;EAAA,IACEC,IAAI,GAAG,UAASC,EAAT,EAAaC,EAAb,EAAgB;IAAE,OAAO,YAAU;MAAE,OAAOD,EAAE,CAACE,KAAH,CAASD,EAAT,EAAaE,SAAb,CAAP;IAAiC,CAApD;EAAuD,CADlF;EAAA,IAEEC,OAAO,GAAG,GAAGC,cAFf;;EAIAC,MAAM,CAACC,OAAP,GAAiBT,cAAc,GAAI,YAAW;IAC5C,SAASA,cAAT,CAAwBU,OAAxB,EAAiC;MAC/B,KAAKC,eAAL,GAAuBV,IAAI,CAAC,KAAKU,eAAN,EAAuB,IAAvB,CAA3B;MACA,IAAIC,GAAJ,EAASC,GAAT,EAAcC,KAAd;MACAJ,OAAO,KAAKA,OAAO,GAAG,EAAf,CAAP;MACA,KAAKK,gBAAL,GAAwBL,OAAO,CAACK,gBAAhC;MACAF,GAAG,GAAGH,OAAO,CAACM,SAAR,IAAqB,EAA3B;;MACA,KAAKJ,GAAL,IAAYC,GAAZ,EAAiB;QACf,IAAI,CAACP,OAAO,CAACW,IAAR,CAAaJ,GAAb,EAAkBD,GAAlB,CAAL,EAA6B;QAC7BE,KAAK,GAAGD,GAAG,CAACD,GAAD,CAAX;QACA,KAAKA,GAAL,IAAYE,KAAZ;MACD;IACF;;IAEDd,cAAc,CAACkB,SAAf,CAAyBC,OAAzB,GAAmC,UAASC,GAAT,EAAc;MAC/CA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;MACA,OAAO,KAAKT,eAAL,CAAqBS,GAArB,CAAP;IACD,CAHD;;IAKApB,cAAc,CAACkB,SAAf,CAAyBG,OAAzB,GAAmC,UAASD,GAAT,EAAc;MAC/CA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;MACA,OAAO,KAAKT,eAAL,CAAqB,KAAKW,QAAL,CAAcF,GAAd,CAArB,CAAP;IACD,CAHD;;IAKApB,cAAc,CAACkB,SAAf,CAAyBK,KAAzB,GAAiC,UAASH,GAAT,EAAc;MAC7CA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;MACAA,GAAG,GAAGA,GAAG,CAACI,OAAJ,CAAY,KAAZ,EAAmB,iBAAnB,CAAN;MACA,OAAO,KAAKb,eAAL,CAAqBS,GAArB,CAAP;IACD,CAJD;;IAMApB,cAAc,CAACkB,SAAf,CAAyBO,OAAzB,GAAmC,UAASL,GAAT,EAAc;MAC/CA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;;MACA,IAAIA,GAAG,CAACM,KAAJ,CAAU,IAAV,CAAJ,EAAqB;QACnB,MAAM,IAAIC,KAAJ,CAAU,+CAA+CP,GAAzD,CAAN;MACD;;MACD,OAAO,KAAKT,eAAL,CAAqBS,GAArB,CAAP;IACD,CAND;;IAQApB,cAAc,CAACkB,SAAf,CAAyBU,GAAzB,GAA+B,UAASR,GAAT,EAAc;MAC3C,OAAO,KAAKA,GAAL,IAAY,EAAnB;IACD,CAFD;;IAIApB,cAAc,CAACkB,SAAf,CAAyBW,OAAzB,GAAmC,UAAST,GAAT,EAAc;MAC/C,OAAOA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAzB;IACD,CAFD;;IAIApB,cAAc,CAACkB,SAAf,CAAyBY,QAAzB,GAAoC,UAASV,GAAT,EAAc;MAChDA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;MACA,OAAO,KAAKW,SAAL,CAAeX,GAAf,CAAP;IACD,CAHD;;IAKApB,cAAc,CAACkB,SAAf,CAAyBc,SAAzB,GAAqC,UAASZ,GAAT,EAAc;MACjD,OAAO,KAAKA,GAAL,IAAY,EAAnB;IACD,CAFD;;IAIApB,cAAc,CAACkB,SAAf,CAAyBe,QAAzB,GAAoC,UAASb,GAAT,EAAc;MAChDA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;;MACA,IAAIA,GAAG,CAACM,KAAJ,CAAU,KAAV,CAAJ,EAAsB;QACpB,MAAM,IAAIC,KAAJ,CAAU,2CAA2CP,GAArD,CAAN;MACD;;MACD,OAAOA,GAAP;IACD,CAND;;IAQApB,cAAc,CAACkB,SAAf,CAAyBgB,UAAzB,GAAsC,UAASd,GAAT,EAAc;MAClDA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;;MACA,IAAI,CAACA,GAAG,CAACM,KAAJ,CAAU,WAAV,CAAL,EAA6B;QAC3B,MAAM,IAAIC,KAAJ,CAAU,6BAA6BP,GAAvC,CAAN;MACD;;MACD,OAAOA,GAAP;IACD,CAND;;IAQApB,cAAc,CAACkB,SAAf,CAAyBiB,WAAzB,GAAuC,UAASf,GAAT,EAAc;MACnDA,GAAG,GAAG,KAAKA,GAAL,IAAY,EAAlB;;MACA,IAAI,CAACA,GAAG,CAACM,KAAJ,CAAU,+BAAV,CAAL,EAAiD;QAC/C,MAAM,IAAIC,KAAJ,CAAU,uBAAuBP,GAAjC,CAAN;MACD;;MACD,OAAOA,GAAP;IACD,CAND;;IAQApB,cAAc,CAACkB,SAAf,CAAyBkB,aAAzB,GAAyC,UAAShB,GAAT,EAAc;MACrD,IAAIA,GAAJ,EAAS;QACP,OAAO,KAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAP;MACD;IACF,CAND;;IAQApB,cAAc,CAACkB,SAAf,CAAyBmB,QAAzB,GAAoC,UAASjB,GAAT,EAAc;MAChD,OAAO,KAAKA,GAAL,IAAY,EAAnB;IACD,CAFD;;IAIApB,cAAc,CAACkB,SAAf,CAAyBoB,QAAzB,GAAoC,UAASlB,GAAT,EAAc;MAChD,OAAO,KAAKA,GAAL,IAAY,EAAnB;IACD,CAFD;;IAIApB,cAAc,CAACkB,SAAf,CAAyBqB,eAAzB,GAA2C,UAASnB,GAAT,EAAc;MACvD,OAAO,KAAKA,GAAL,IAAY,EAAnB;IACD,CAFD;;IAIApB,cAAc,CAACkB,SAAf,CAAyBsB,UAAzB,GAAsC,UAASpB,GAAT,EAAc;MAClD,OAAO,KAAKA,GAAL,IAAY,EAAnB;IACD,CAFD;;IAIApB,cAAc,CAACkB,SAAf,CAAyBuB,aAAzB,GAAyC,UAASrB,GAAT,EAAc;MACrD,IAAIA,GAAG,IAAI,IAAX,EAAiB;QACf,OAAO,KAAKA,GAAL,IAAY,EAAnB;MACD,CAFD,MAEO;QACL,OAAOA,GAAP;MACD;IACF,CAND;;IAQApB,cAAc,CAACkB,SAAf,CAAyBwB,cAAzB,GAA0C,UAAStB,GAAT,EAAc;MACtD,OAAO,KAAKA,GAAL,IAAY,EAAnB;IACD,CAFD;;IAIApB,cAAc,CAACkB,SAAf,CAAyByB,QAAzB,GAAoC,UAASvB,GAAT,EAAc;MAChD,OAAO,KAAKA,GAAL,IAAY,EAAnB;IACD,CAFD;;IAIApB,cAAc,CAACkB,SAAf,CAAyB0B,aAAzB,GAAyC,GAAzC;IAEA5C,cAAc,CAACkB,SAAf,CAAyB2B,YAAzB,GAAwC,GAAxC;IAEA7C,cAAc,CAACkB,SAAf,CAAyB4B,cAAzB,GAA0C,OAA1C;IAEA9C,cAAc,CAACkB,SAAf,CAAyB6B,eAAzB,GAA2C,QAA3C;IAEA/C,cAAc,CAACkB,SAAf,CAAyB8B,iBAAzB,GAA6C,UAA7C;IAEAhD,cAAc,CAACkB,SAAf,CAAyB+B,aAAzB,GAAyC,MAAzC;;IAEAjD,cAAc,CAACkB,SAAf,CAAyBP,eAAzB,GAA2C,UAASuC,GAAT,EAAc;MACvD,IAAIC,GAAJ;MACAA,GAAG,GAAGD,GAAG,CAACxB,KAAJ,CAAU,2FAAV,CAAN;;MACA,IAAIyB,GAAJ,EAAS;QACP,MAAM,IAAIxB,KAAJ,CAAU,kCAAkCuB,GAAlC,GAAwC,YAAxC,GAAuDC,GAAG,CAACC,KAArE,CAAN;MACD;;MACD,OAAOF,GAAP;IACD,CAPD;;IASAlD,cAAc,CAACkB,SAAf,CAAyBI,QAAzB,GAAoC,UAAS4B,GAAT,EAAc;MAChD,IAAIG,QAAJ;MACAA,QAAQ,GAAG,KAAKtC,gBAAL,GAAwB,aAAxB,GAAwC,IAAnD;MACA,OAAOmC,GAAG,CAAC1B,OAAJ,CAAY6B,QAAZ,EAAsB,OAAtB,EAA+B7B,OAA/B,CAAuC,IAAvC,EAA6C,MAA7C,EAAqDA,OAArD,CAA6D,IAA7D,EAAmE,MAAnE,EAA2EA,OAA3E,CAAmF,KAAnF,EAA0F,OAA1F,CAAP;IACD,CAJD;;IAMAxB,cAAc,CAACkB,SAAf,CAAyBa,SAAzB,GAAqC,UAASmB,GAAT,EAAc;MACjD,IAAIG,QAAJ;MACAA,QAAQ,GAAG,KAAKtC,gBAAL,GAAwB,aAAxB,GAAwC,IAAnD;MACA,OAAOmC,GAAG,CAAC1B,OAAJ,CAAY6B,QAAZ,EAAsB,OAAtB,EAA+B7B,OAA/B,CAAuC,IAAvC,EAA6C,MAA7C,EAAqDA,OAArD,CAA6D,IAA7D,EAAmE,QAAnE,EAA6EA,OAA7E,CAAqF,KAArF,EAA4F,OAA5F,EAAqGA,OAArG,CAA6G,KAA7G,EAAoH,OAApH,EAA6HA,OAA7H,CAAqI,KAArI,EAA4I,OAA5I,CAAP;IACD,CAJD;;IAMA,OAAOxB,cAAP;EAED,CA1JiC,EAAlC;AA4JD,CAjKD,EAiKGiB,IAjKH,CAiKQ,IAjKR"},"metadata":{},"sourceType":"script"}